$pc: 768px; // PC
$sp: 767px; // スマホ

@mixin pc {
	@media screen and (min-width: ($pc)) {
		@content;
	}
}

@mixin me($max, $min) {
	@media screen and (max-width: #{$max}px) and (min-width: #{$min}px) {
		@content;
	}
}

@mixin sp {
	@media screen and (max-width: ($sp)) {
		@content;
	}
}

// どセンター
@mixin center {
	display: flex;
	justify-content: center;
	align-items: center;
}

// absoluteどセンター
@mixin p-center {
	top: 50%;
	left: 50%;
	translate: -50% -50%;
}

// absolute上下センター
@mixin p-center-top {
	top: 50%;
	translate: 0 -50%;
}

// absolute左右センター
@mixin p-center-left {
	left: 50%;
	translate: -50% 0;
}

// 縦並び間空き
@mixin column($gap) {
	display: flex;
	flex-direction: column;
	gap: $gap;
}

// ↓CSSでは
// @include column( p(10) );

// 横並び◯列
@mixin row($division, $gap) {
	width: calc((100% / #{$division}) - (#{$gap} * (#{$division} - 1) / #{$division}));
}

// 3列の間がp(10)の場合
// @include row(3, p(10));
// ↓CSSでは
// width: calc(100% / ◯ - (□ * (◯ - 1) / ◯));

// background-contain
@mixin imgContain($img) {
	background-image: url("../img/#{$img}");
	background-size: contain;
	background-position: center;
	background-repeat: no-repeat;
}

// ↓CSSでは
// @include imgContain('example.jpg');

// background-cover
@mixin imgCover($img) {
	background-image: url("../img/#{$img}");
	background-size: cover;
	background-position: center;
	background-repeat: no-repeat;
}

// ↓CSSでは
// @include imgCover('example.jpg');

// backgroundIcon-contain
@mixin iconContain($img) {
	background-image: $img;
	background-size: contain;
	background-position: center;
	background-repeat: no-repeat;
}

// ↓CSSでは
// @include iconContain($dot);

// backgroundIcon-cover
@mixin iconCover($img) {
	background-image: $img;
	background-size: cover;
	background-position: center;
	background-repeat: no-repeat;
}

// ↓CSSでは
// @include iconCover($dot);

$screenSizePC: 1280;
$screenSizeSP: 390;

// サイズ
@function p($size, $viewport: $screenSizePC) {
	$rate: calc(100 / $viewport);
	@return $rate * $size * 1vw;
}

// font-size: p(50);

@function pm($size, $maxSize: ($size * 4 / 5), $viewport: $screenSizePC) {
	$rate: calc(100 / $viewport);
	$calculatedSize: $rate * $size * 1vw;
	@return max(#{$calculatedSize}, #{$maxSize}px);
}

// 入力値に*4/5した値とvwの値を比較して大きい方を返す
// font-size: pm(50,40);
// or
// font-size: pm(50);

@function pmin($size, $maxSize: ($size * 4 / 5), $viewport: $screenSizePC) {
	$rate: calc(100 / $viewport);
	$calculatedSize: $rate * $size * 1vw;
	@return min(#{$calculatedSize}, #{$maxSize}px);
}

// 入力値に*4/5した値とvwの値を比較して大きい方を返す
// font-size: pmin(-50,-40);
// or
// font-size: pmin(-50);

@function pcl(
	$minSize: (
		$size * 4 / 5,
	),
	$size,
	$maxSize: (
		$size * 4 / 5,
	),
	$viewport: $screenSizePC
) {
	$rate: calc(100 / $viewport);
	$calculatedSize: $rate * $size * 1vw;
	@return clamp(#{$minSize}px, $calculatedSize, #{$maxSize}px);
}

// 入力値に*4/5した値とvwの値を比較して大きい方を返す
// font-size: pcl(30,50,40);
// or
// font-size: pcl(50);

@function s($size, $viewport: $screenSizeSP) {
	$rate: calc(100 / $viewport);
	@return $rate * $size * 1vw;
}

// font-size: s(50);

@function sm($size, $maxSize: ($size * 4 / 5), $viewport: $screenSizeSP) {
	$rate: calc(100 / $viewport);
	$calculatedSize: $rate * $size * 1vw;
	@return min(#{$calculatedSize}, #{$maxSize}px);
}

// 入力値に*4/5した値とvwの値を比較して大きい方を返す
// font-size: sm(50,40);
// or
// font-size: sm(50);

@function smax($size, $maxSize: ($size * 4 / 5), $viewport: $screenSizeSP) {
	$rate: calc(100 / $viewport);
	$calculatedSize: $rate * $size * 1vw;
	@return max(#{$calculatedSize}, #{$maxSize}px);
}

// 入力値に*4/5した値とvwの値を比較して大きい方を返す
// font-size: smax(50,40);
// or
// font-size: smax(50);

@function scl(
	$minSize: (
		$size * 4 / 5,
	),
	$size,
	$maxSize: (
		$size * 4 / 5,
	),
	$viewport: $screenSizeSP
) {
	$rate: calc(100 / $viewport);
	$calculatedSize: $rate * $size * 1vw;
	@return clamp(#{$minSize}px, $calculatedSize, #{$maxSize}px);
}

// 入力値に*4/5した値とvwの値を比較して大きい方を返す
// font-size: scl(30,50,40);
// or
// font-size: scl(50);

// line-height
@mixin lineHeight($font-size, $line-height) {
	line-height: $line-height / $font-size;
}

// ↓CSSでは
// @include lineHeight(50, 75);
// これでline-heightが単位なしで計算される

// 関数の使い方
// @mixin test($sidePadding : calc(( 98 / 1280) * 100vw) , $sidemargin : 0 0 0 auto ){
//   .test--btn{
//     padding: calc(( 6 / 1280) * 100vw) $sidePadding calc(( 2 / 1280) * 100vw);
//     margin: $sidemargin;
//   }
// }

// @mixin img($img){
//   background-image: url('/img/#{$img}');
//   background-size: contain;
//   background-position: center;
//   background-repeat: no-repeat;
// }
// ↓CSSでは
// @include img('example.jpg');
